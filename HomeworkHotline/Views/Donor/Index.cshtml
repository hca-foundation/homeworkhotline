@model IEnumerable<Repository.DonorModel>

@{
    ViewBag.Title = "Donors";
    var totalCount = 999999;

}

@(Html.Kendo().Grid(Model)
    .Name("donorGrid")
    .Pageable(p => p.Numeric(false)
            .PreviousNext(false)
            .Messages(m => m.Display("Records: {2}")))
    .Columns(columns =>
    {
        columns.Bound(c => c.DonorName2).Title("Donor Name");
        columns.Bound(c => c.BusinessName);
        columns.Bound(c => c.TotalDonations).Title("Total Donations").Format("{0:c}").HtmlAttributes(new { style="text-align:right;" });
        columns.Command(cmd => { cmd.Edit().Text(" "); cmd.Destroy().Text(" "); }).HtmlAttributes(new { style = "text-align:center;" }).Width(160);
        columns.Bound(c => c.Address1).Hidden(true);
        columns.Bound(c => c.Address2).Hidden(true);
        columns.Bound(c => c.City).Hidden(true);
        columns.Bound(c => c.DonorState).Hidden(true);
        columns.Bound(c => c.Zip).Hidden(true);
        columns.Bound(c => c.Phone).Hidden(true);

    })
    .Events(x => {
        x.ExcelExport("donorExcelExport");
    })
    .ToolBar(toolBar =>
    {
    toolBar.Template(@<text>
        <div class="add-button">
            <a class='btn btn-info k-grid-add' href='#'><span class='k-icon k-i-plus'></span>Add Donor</a>
            @if (User.IsInRole("Administrator"))
            {
                <a href="" class="btn btn-primary k-grid-excel" id="exportExcel">Export to Excel</a>
            }
        </div>
        <div class="search-box"><input class='k-textbox k-search' value="Search..." onfocus="if (this.value=='Search...') this.value='';" onblur="this.value = this.value==''?'Search...':this.value;" data-field="DonorName,BusinessName" id="searchbox" /><button class="btn btn-default" id="clear-search">Clear</button></div></text>);
    })
    .HtmlAttributes(new { style = "height: 550px;" })
    .Scrollable()
    .Sortable(sortable => sortable
        .AllowUnsort(true)
        .SortMode(GridSortMode.MultipleColumn)
        .ShowIndexes(true))
    .Filterable(filterable => filterable
            .Operators(operators => operators
                .ForString(str => str
                    .Clear()
                    .Contains("Contains")
                    .DoesNotContain("Does not contain")
                    .StartsWith("Starts with")
                    .EndsWith("Ends with")
                    .IsEqualTo("Is equal to")
                    .IsNotEqualTo("Is not equal to")
                )
            )
        )
    .Excel(excel => excel
        .FileName("HH-Donors.xlsx")
        .Filterable(true)
        .AllPages(true)
    )
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditorDonor").Window(w => w.Title("Donor Details").Width(720)))
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize((int)totalCount)
        .Batch(true)
        .Events( e =>
        {
            e.Sync("sync_handler");
        })
        .ServerOperation(false)
        .Model(model => { model.Id(c => c.DonorID); })
        .Read(read => read.Action("Donors_Read", "Donor"))
        .Sort(sort => sort.Add("DonorName").Ascending())
        .Create(create => create.Action("Donors_Create", "Donor"))
        .Update(update => update.Action("Donors_Update", "Donor"))
        .Destroy(destroy => destroy.Action("Donors_Delete", "Donor"))
    )
    .ClientDetailTemplateId("DonorGivingsDetailTemplate")
)

<script id="DonorGivingsDetailTemplate" type="text/x-kendo-template">
    @(Html.Kendo().Grid<Repository.DonorGivingModel>()
            .Name("grid#=DonorID#")
            .Columns(columns =>
            {
                columns.Bound(o => o.AmountGiven).Format("{0:c}").HtmlAttributes(new { style = "text-align:right;" });
                columns.Bound(o => o.DateGiven).Format("{0:d}").EditorTemplateName("Date");
                columns.Bound(o => o.InKind).ClientTemplate(
                    "\\# if (InKind == true) { \\#" +
                        "<span class=\"k-icon k-i-check\"></span>" +
                    "\\# } \\#"
                    ).Width(120).HtmlAttributes(new { style = "text-align:center" }); ;
                columns.Command(cmd => { cmd.Edit(); cmd.Destroy(); });
            })
            //.Events(x => { x.ExcelExport("donorGivingExcelExport"); })
            .ToolBar(toolbar => toolbar.Create().Text("Add Donation"))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Events(events => { events.Sync("syncParent"); })
                .Model(model => { model.Id(c => c.DonorGivingID); })
                .Read(read => read.Action("DonorGivings_Read", "Donor", new { parentID = "#=DonorID#" }))
                .Create(create => create.Action("DonorGivings_Create", "Donor", new { parentID = "#=DonorID#" }))
                .Update(update => update.Action("DonorGivings_Update", "Donor"))
                .Destroy(destroy => destroy.Action("DonorGivings_Delete", "Donor"))
            )
            .Editable(editable => editable.Mode(GridEditMode.InLine).ConfirmDelete("test").DisplayDeleteConfirmation("Are you sure you want to Delete this Donation?"))
            .ToClientTemplate()
    )
</script>

<script type="text/javascript">
    function sync_handler(e) {
        this.read();
    }

    $("#searchbox").on("keyup change", function () {
        var filter = { logic: "or", filters: [] };
        $this = $(this);
        $searchValue = $this.val();
        var grid = $("#donorGrid").data("kendoGrid");
        if ($searchValue) {
            $.each($this.data("field").split(','), function(index, field){
               filter.filters.push({ field: field, operator: "contains", value: $searchValue });
            });
        }
        grid.dataSource.query({ filter: filter });
    });

    $("#clear-search").on("click", function () {
        $("#searchbox").val("");
        var grid = $("#donorGrid").data("kendoGrid");
        grid.dataSource.filter({});
    });

    function syncParent(e) {
        var parentData = $('#donorGrid').data("kendoGrid");
        parentData.dataSource.read();
    }

    var exportFlag = false;
    function donorExcelExport(e) {
        var columns = e.sender.columns;
        if (!exportFlag) {
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].hidden)
                    e.sender.showColumn(i);
            }
            e.preventDefault();
            exportFlag = true;
            setTimeout(function () {
                e.sender.saveAsExcel();
            });
        } else {
            for (var i = 0; i < columns.length; i++) {
                if (typeof columns[i].hidden != "undefined" && !columns[i].hidden)
                    e.sender.hideColumn(i);
            }
            exportFlag = false;
        }
    }

    @*function donorGivingExcelExport(e) {
        e.preventDefault();
    }

    var detailExportPromises = [];
    var dataSource = new kendo.data.DataSource({
        type: "aspnetmvc-ajax",
        transport: {
            read: "@Url.Action("DonorGivings_Read", "Donor")",
        type: "POST"
    },
        schema: {
        data: "Data",
        total: "Total",
    error: "Errors"
    }
    });

    dataSource.read();

    function donorExcelExport(e) {
        e.preventDefault();

        var workbook = e.workbook;

        detailExportPromises = [];

        var masterData = e.data;

        for (var rowIndex = 0; rowIndex < masterData.length; rowIndex++) {
            exportChildData(masterData[rowIndex].DonorID, rowIndex);
        }

        $.when.apply(null, detailExportPromises)
        .then(function () {
            var detailExports = $.makeArray(arguments);

            detailExports.sort(function (a, b) {
                return a.masterRowIndex - b.masterRowIndex;
            });

            var columns = e.sender.columns;
            if (!exportFlag) {
                for (var i = 0; i < columns.length; i++) {
                    if (columns[i].hidden)
                        e.sender.showColumn(i);
                }
                e.preventDefault();
                exportFlag = true;
                setTimeout(function () {
                    e.sender.saveAsExcel();
                });
            } else {
                for (var i = 0; i < columns.length; i++) {
                    if (typeof columns[i].hidden != "undefined" && !columns[i].hidden)
                        e.sender.hideColumn(i);
                }
                exportFlag = false;
            }

            workbook.sheets[0].columns.unshift({ width: 30 });

            for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                workbook.sheets[0].rows[i].cells.unshift({});
            }

            for (var i = detailExports.length - 1; i >= 0; i--) {
                var masterRowIndex = detailExports[i].masterRowIndex + 1;

                var sheet = detailExports[i].sheet;

                for (var ci = 0; ci < sheet.rows.length; ci++) {
                    if (sheet.rows[ci].cells[0].value) {
                        sheet.rows[ci].cells.unshift({});
                    }
                }

                [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
            }

            kendo.saveAs({
                dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                fileName: "HH-Donors.xlsx"
            });
        });
    }

    function exportChildData(DonorID, rowIndex) {
        var deferred = $.Deferred();

        detailExportPromises.push(deferred);

        var rows = [{
            cells: [
                { value: "AmountGiven" },
                { value: "DateGiven" },
                { value: "InKind" },
            ]
        }];

        dataSource.filter({ field: "DonorID", operator: "eq", value: DonorID });

        var exporter = new kendo.ExcelExporter({
            columns: [
                { field: "AmountGiven" },
                { field: "DateGiven" },
                { field: "InKind" },
            ],
            dataSource: dataSource
        });

        exporter.workbook().then(function (book, data) {
            deferred.resolve({
                masterRowIndex: rowIndex,
                sheet: book.sheets[0]
            });
        });
    }*@
</script>
